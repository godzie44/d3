package bootstrap

import (
	"bytes"
	"github.com/godzie44/d3/d3/parser"
	"go/format"
	"html/template"
	"io"
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"
)

const aliasPrefix = "D3_entity_"

type Generator struct {
	PkgPath, PkgName string
	Metas            []parser.EntityMeta
	OutName          string
	BuildTags        string
	Debug            bool
}

func (g *Generator) writeAlias(w io.Writer) error {
	t, err := template.New("aliasing").Parse(`
// TEMPORARY AUTOGENERATED

package {{.pkg}}

{{$pref := .Prefix}}

{{range .metas}}
type {{$pref}}{{.Name}} *{{.Name}}
{{end}}
`)
	if err != nil {
		return err
	}

	return t.Execute(w, map[string]interface{}{"pkg": g.PkgName, "Prefix": aliasPrefix, "metas": g.Metas})
}

// writeMain creates a .go file that launches the generator if 'go run'.
func (g *Generator) writeMain(w io.Writer) error {
	t, err := template.New("aliasing").Parse(`
// +build ignore

// TEMPORARY AUTOGENERATED

package main

import (
	"fmt"
	"os"
	"reflect"
	"github.com/godzie44/d3/orm/gen"
	"github.com/godzie44/d3/orm/entity"
	al "{{.PkgPath}}"
)

func main() {
	_ = entity.Index{}
	fmt.Fprintf(os.Stdout, "// Code generated by d3. DO NOT EDIT.\n\n")
	fmt.Fprintf(os.Stdout, "package {{.PkgName}}\n")
	g := gen.NewGenerator(os.Stdout, "{{.PkgPath}}")
	{{$pref := .Prefix}}
	{{range .metas}}
	g.Prepare(reflect.TypeOf(al.{{$pref}}{{.Name}}(nil)), "{{.TableName}}", {{range .Indexes}} entity.Index{Name: "{{.Name}}", Columns: []string{ {{range .Columns}} "{{.}}", {{end}} }, Unique: {{.Unique}} }, {{end}})
	{{end}}
	g.Write()
}
`)
	if err != nil {
		return err
	}

	return t.Execute(w, map[string]interface{}{"PkgPath": g.PkgPath, "Prefix": aliasPrefix, "PkgName": g.PkgName, "metas": g.Metas})
}

func (g *Generator) Run() error {
	aliasFile, err := ioutil.TempFile(filepath.Dir(g.OutName), "d3alias")
	if err != nil {
		return err
	}
	defer aliasFile.Close()

	if err = g.writeAlias(aliasFile); err != nil {
		return err
	}
	if err = os.Rename(aliasFile.Name(), aliasFile.Name()+".go"); err != nil {
		return err
	}
	defer g.removeIfNeeded(aliasFile.Name() + ".go")

	mainFile, err := ioutil.TempFile(filepath.Dir(g.OutName), "d3boot")
	if err != nil {
		return err
	}
	defer mainFile.Close()

	if err = g.writeMain(mainFile); err != nil {
		return err
	}
	path := mainFile.Name() + ".go"
	if err = os.Rename(mainFile.Name(), path); err != nil {
		return err
	}
	defer g.removeIfNeeded(mainFile.Name() + ".go")

	codeBuff := &bytes.Buffer{}

	cmd := exec.Command("go", "run", "-tags", g.BuildTags, filepath.Base(path))
	cmd.Stdout = codeBuff
	cmd.Stderr = os.Stderr
	cmd.Dir = filepath.Dir(path)
	if err = cmd.Run(); err != nil {
		return err
	}

	out, err := format.Source(codeBuff.Bytes())
	if err != nil {
		return err
	}

	return ioutil.WriteFile(g.OutName, out, 0644)
}

func (g *Generator) removeIfNeeded(filename string) {
	if !g.Debug {
		_ = os.Remove(filename)
	}
}
