package bootstrap

import (
	"bytes"
	"github.com/godzie44/d3/cmd/d3/parser"
	"github.com/stretchr/testify/assert"
	"strings"
	"testing"
)

var boot = Generator{
	PkgPath: "test-pkg-path",
	PkgName: "pkg-name",
	Metas: []parser.EntityMeta{
		{
			Name:      "Entity1",
			TableName: "table1",
		},
		{
			Name:      "Entity2",
			TableName: "table2",
		},
	},
}

func TestWriteAlias(t *testing.T) {
	buff := &bytes.Buffer{}

	assert.NoError(t, boot.writeAlias(buff))

	expectedFile := `
// TEMPORARY AUTOGENERATED

package pkg-name




type D3_entity_Entity1 *Entity1

type D3_entity_Entity2 *Entity2
`
	assert.Equal(t, strings.Trim(expectedFile, "\n"), strings.Trim(buff.String(), "\n"))
}

func TestWriteMain(t *testing.T) {
	buff := &bytes.Buffer{}
	assert.NoError(t, boot.writeMain(buff))

	expectedFile := `
// +build ignore

// TEMPORARY AUTOGENERATED

package main

import (
	"fmt"
	"os"
	"reflect"
	"github.com/godzie44/d3/orm/gen"
	al "test-pkg-path"
)

func main() {
	fmt.Fprintf(os.Stdout, "// Code generated by d3. DO NOT EDIT.\n\n")
	fmt.Fprintf(os.Stdout, "package pkg-name\n")
	g := gen.NewGenerator(os.Stdout, "test-pkg-path")
	
	
	g.Prepare(reflect.TypeOf(al.D3_entity_Entity1(nil)), "table1")
	
	g.Prepare(reflect.TypeOf(al.D3_entity_Entity2(nil)), "table2")
	
	g.Write()
}`

	assert.Equal(t, strings.Trim(expectedFile, "\n"), strings.Trim(buff.String(), "\n"))
}
