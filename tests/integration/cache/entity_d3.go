// Code generated by d3. DO NOT EDIT.

package cache

import "fmt"
import "d3/orm/entity"

func (e *entity1) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*entity1)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: e.__d3_makeFieldExtractor(),
			FieldSetter:    e.__d3_makeFieldSetter(),
			CompareFields:  e.__d3_makeComparator(),
			Instantiator:   e.__d3_makeInstantiator(),
			Copier:         e.__d3_makeCopier(),
		},
	}
}

func (e *entity1) __d3_makeFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*entity1)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "Id":
			return sTyped.Id, nil

		case "Rel":
			return sTyped.Rel, nil

		case "Data":
			return sTyped.Data, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}

func (e *entity1) __d3_makeInstantiator() entity.Instantiator {
	return func() interface{} {
		return &entity1{}
	}
}

func (e *entity1) __d3_makeFieldSetter() entity.FieldSetter {
	return func(s interface{}, name string, val interface{}) error {
		eTyped, ok := s.(*entity1)
		if !ok {
			return fmt.Errorf("invalid entity type")
		}

		switch name {
		case "Id":
			eTyped.Id = val.(int32)
			return nil
		case "Rel":
			eTyped.Rel = val.(entity.Collection)
			return nil
		case "Data":
			eTyped.Data = val.(string)
			return nil

		default:
			return fmt.Errorf("field %s not found", name)
		}
	}
}

func (e *entity1) __d3_makeCopier() entity.Copier {
	return func(src interface{}) interface{} {
		srcTyped, ok := src.(*entity1)
		if !ok {
			return fmt.Errorf("invalid entity type")
		}

		copy := &entity1{}

		copy.Id = srcTyped.Id
		copy.Data = srcTyped.Data

		if srcTyped.Rel != nil {
			copy.Rel = srcTyped.Rel.(entity.Copiable).DeepCopy().(entity.Collection)
		}

		return copy
	}
}

func (e *entity1) __d3_makeComparator() entity.FieldComparator {
	return func(e1, e2 interface{}, fName string) bool {
		if e1 == nil || e2 == nil {
			return e1 == e2
		}

		e1Typed, ok := e1.(*entity1)
		if !ok {
			return false
		}
		e2Typed, ok := e2.(*entity1)
		if !ok {
			return false
		}

		switch fName {

		case "Id":
			return e1Typed.Id == e2Typed.Id
		case "Rel":
			return e1Typed.Rel == e2Typed.Rel
		case "Data":
			return e1Typed.Data == e2Typed.Data
		default:
			return false
		}
	}
}

func (e *entity2) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*entity2)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: e.__d3_makeFieldExtractor(),
			FieldSetter:    e.__d3_makeFieldSetter(),
			CompareFields:  e.__d3_makeComparator(),
			Instantiator:   e.__d3_makeInstantiator(),
			Copier:         e.__d3_makeCopier(),
		},
	}
}

func (e *entity2) __d3_makeFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*entity2)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "Id":
			return sTyped.Id, nil

		case "Data":
			return sTyped.Data, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}

func (e *entity2) __d3_makeInstantiator() entity.Instantiator {
	return func() interface{} {
		return &entity2{}
	}
}

func (e *entity2) __d3_makeFieldSetter() entity.FieldSetter {
	return func(s interface{}, name string, val interface{}) error {
		eTyped, ok := s.(*entity2)
		if !ok {
			return fmt.Errorf("invalid entity type")
		}

		switch name {
		case "Id":
			eTyped.Id = val.(int32)
			return nil
		case "Data":
			eTyped.Data = val.(string)
			return nil

		default:
			return fmt.Errorf("field %s not found", name)
		}
	}
}

func (e *entity2) __d3_makeCopier() entity.Copier {
	return func(src interface{}) interface{} {
		srcTyped, ok := src.(*entity2)
		if !ok {
			return fmt.Errorf("invalid entity type")
		}

		copy := &entity2{}

		copy.Id = srcTyped.Id
		copy.Data = srcTyped.Data

		return copy
	}
}

func (e *entity2) __d3_makeComparator() entity.FieldComparator {
	return func(e1, e2 interface{}, fName string) bool {
		if e1 == nil || e2 == nil {
			return e1 == e2
		}

		e1Typed, ok := e1.(*entity2)
		if !ok {
			return false
		}
		e2Typed, ok := e2.(*entity2)
		if !ok {
			return false
		}

		switch fName {

		case "Id":
			return e1Typed.Id == e2Typed.Id
		case "Data":
			return e1Typed.Data == e2Typed.Data
		default:
			return false
		}
	}
}
