// Code generated by d3. DO NOT EDIT.

package schema

import "fmt"
import "d3/orm/entity"

func (s *shop) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*shop)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: s.__d3_makeFieldExtractor(),
			Instantiator:   s.__d3_makeInstantiator(),
		},
	}
}

func (s *shop) __d3_makeFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*shop)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "Id":
			return sTyped.Id, nil

		case "Books":
			return sTyped.Books, nil

		case "Profile":
			return sTyped.Profile, nil

		case "Name":
			return sTyped.Name, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}

func (s *shop) __d3_makeInstantiator() entity.Instantiator {
	return func() interface{} {
		return &shop{}
	}
}

func (p *profile) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*profile)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: p.__d3_makeFieldExtractor(),
			Instantiator:   p.__d3_makeInstantiator(),
		},
	}
}

func (p *profile) __d3_makeFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*profile)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "Id":
			return sTyped.Id, nil

		case "Description":
			return sTyped.Description, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}

func (p *profile) __d3_makeInstantiator() entity.Instantiator {
	return func() interface{} {
		return &profile{}
	}
}

func (b *book) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*book)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: b.__d3_makeFieldExtractor(),
			Instantiator:   b.__d3_makeInstantiator(),
		},
	}
}

func (b *book) __d3_makeFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*book)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "Id":
			return sTyped.Id, nil

		case "Authors":
			return sTyped.Authors, nil

		case "Name":
			return sTyped.Name, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}

func (b *book) __d3_makeInstantiator() entity.Instantiator {
	return func() interface{} {
		return &book{}
	}
}

func (a *author) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*author)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: a.__d3_makeFieldExtractor(),
			Instantiator:   a.__d3_makeInstantiator(),
		},
	}
}

func (a *author) __d3_makeFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*author)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "Id":
			return sTyped.Id, nil

		case "Name":
			return sTyped.Name, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}

func (a *author) __d3_makeInstantiator() entity.Instantiator {
	return func() interface{} {
		return &author{}
	}
}

func (a *allTypeStruct) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*allTypeStruct)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: a.__d3_makeFieldExtractor(),
			Instantiator:   a.__d3_makeInstantiator(),
		},
	}
}

func (a *allTypeStruct) __d3_makeFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*allTypeStruct)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "ID":
			return sTyped.ID, nil

		case "BoolField":
			return sTyped.BoolField, nil

		case "IntField":
			return sTyped.IntField, nil

		case "Int32Field":
			return sTyped.Int32Field, nil

		case "Int64Field":
			return sTyped.Int64Field, nil

		case "Float32Field":
			return sTyped.Float32Field, nil

		case "Float64Field":
			return sTyped.Float64Field, nil

		case "StringField":
			return sTyped.StringField, nil

		case "TimeField":
			return sTyped.TimeField, nil

		case "NullBoolField":
			return sTyped.NullBoolField, nil

		case "NullI32Field":
			return sTyped.NullI32Field, nil

		case "NullI64Field":
			return sTyped.NullI64Field, nil

		case "NullFloat64Field":
			return sTyped.NullFloat64Field, nil

		case "NullStringField":
			return sTyped.NullStringField, nil

		case "NullTimeField":
			return sTyped.NullTimeField, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}

func (a *allTypeStruct) __d3_makeInstantiator() entity.Instantiator {
	return func() interface{} {
		return &allTypeStruct{}
	}
}
