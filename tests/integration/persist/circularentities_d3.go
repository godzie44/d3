// Code generated by d3. DO NOT EDIT.

package persist

import "fmt"
import "d3/orm/entity"
import "database/sql/driver"

func (s *ShopCirc) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*ShopCirc)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: s.__d3_makeFieldExtractor(),
			FieldSetter:    s.__d3_makeFieldSetter(),
			Instantiator:   s.__d3_makeInstantiator(),
		},
	}
}

func (s *ShopCirc) __d3_makeFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*ShopCirc)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "Id":
			return sTyped.Id, nil

		case "Name":
			return sTyped.Name, nil

		case "Profile":
			return sTyped.Profile, nil

		case "FriendShop":
			return sTyped.FriendShop, nil

		case "TopSeller":
			return sTyped.TopSeller, nil

		case "Sellers":
			return sTyped.Sellers, nil

		case "KnownSellers":
			return sTyped.KnownSellers, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}

func (s *ShopCirc) __d3_makeInstantiator() entity.Instantiator {
	return func() interface{} {
		return &ShopCirc{}
	}
}

func (s *ShopCirc) __d3_makeFieldSetter() entity.FieldSetter {
	return func(s interface{}, name string, val interface{}) error {
		eTyped, ok := s.(*ShopCirc)
		if !ok {
			return fmt.Errorf("invalid entity type")
		}

		switch name {
		case "Name":
			eTyped.Name = val.(string)
			return nil
		case "Profile":
			eTyped.Profile = val.(entity.WrappedEntity)
			return nil
		case "FriendShop":
			eTyped.FriendShop = val.(entity.WrappedEntity)
			return nil
		case "TopSeller":
			eTyped.TopSeller = val.(entity.WrappedEntity)
			return nil
		case "Sellers":
			eTyped.Sellers = val.(entity.Collection)
			return nil
		case "KnownSellers":
			eTyped.KnownSellers = val.(entity.Collection)
			return nil

		case "Id":
			if valuer, isValuer := val.(driver.Valuer); isValuer {
				v, err := valuer.Value()
				if err != nil {
					return eTyped.Id.Scan(nil)
				}
				return eTyped.Id.Scan(v)
			}
			return eTyped.Id.Scan(val)
		default:
			return fmt.Errorf("field %s not found", name)
		}
	}
}

func (s *ShopProfileCirc) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*ShopProfileCirc)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: s.__d3_makeFieldExtractor(),
			FieldSetter:    s.__d3_makeFieldSetter(),
			Instantiator:   s.__d3_makeInstantiator(),
		},
	}
}

func (s *ShopProfileCirc) __d3_makeFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*ShopProfileCirc)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "Id":
			return sTyped.Id, nil

		case "Shop":
			return sTyped.Shop, nil

		case "Description":
			return sTyped.Description, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}

func (s *ShopProfileCirc) __d3_makeInstantiator() entity.Instantiator {
	return func() interface{} {
		return &ShopProfileCirc{}
	}
}

func (s *ShopProfileCirc) __d3_makeFieldSetter() entity.FieldSetter {
	return func(s interface{}, name string, val interface{}) error {
		eTyped, ok := s.(*ShopProfileCirc)
		if !ok {
			return fmt.Errorf("invalid entity type")
		}

		switch name {
		case "Shop":
			eTyped.Shop = val.(entity.WrappedEntity)
			return nil
		case "Description":
			eTyped.Description = val.(string)
			return nil

		case "Id":
			if valuer, isValuer := val.(driver.Valuer); isValuer {
				v, err := valuer.Value()
				if err != nil {
					return eTyped.Id.Scan(nil)
				}
				return eTyped.Id.Scan(v)
			}
			return eTyped.Id.Scan(val)
		default:
			return fmt.Errorf("field %s not found", name)
		}
	}
}

func (s *SellerCirc) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*SellerCirc)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: s.__d3_makeFieldExtractor(),
			FieldSetter:    s.__d3_makeFieldSetter(),
			Instantiator:   s.__d3_makeInstantiator(),
		},
	}
}

func (s *SellerCirc) __d3_makeFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*SellerCirc)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "Id":
			return sTyped.Id, nil

		case "Name":
			return sTyped.Name, nil

		case "CurrentShop":
			return sTyped.CurrentShop, nil

		case "KnownShops":
			return sTyped.KnownShops, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}

func (s *SellerCirc) __d3_makeInstantiator() entity.Instantiator {
	return func() interface{} {
		return &SellerCirc{}
	}
}

func (s *SellerCirc) __d3_makeFieldSetter() entity.FieldSetter {
	return func(s interface{}, name string, val interface{}) error {
		eTyped, ok := s.(*SellerCirc)
		if !ok {
			return fmt.Errorf("invalid entity type")
		}

		switch name {
		case "Name":
			eTyped.Name = val.(string)
			return nil
		case "CurrentShop":
			eTyped.CurrentShop = val.(entity.WrappedEntity)
			return nil
		case "KnownShops":
			eTyped.KnownShops = val.(entity.Collection)
			return nil

		case "Id":
			if valuer, isValuer := val.(driver.Valuer); isValuer {
				v, err := valuer.Value()
				if err != nil {
					return eTyped.Id.Scan(nil)
				}
				return eTyped.Id.Scan(v)
			}
			return eTyped.Id.Scan(val)
		default:
			return fmt.Errorf("field %s not found", name)
		}
	}
}
