// Code generated by d3. DO NOT EDIT.

package relation

import "fmt"
import "d3/orm/entity"

func (b *BookLL) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*BookLL)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: b.__d3_createFieldExtractor(),
		},
	}
}

func (b *BookLL) __d3_createFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*BookLL)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "ID":
			return sTyped.ID, nil

		case "Authors":
			return sTyped.Authors, nil

		case "Name":
			return sTyped.Name, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}

func (a *AuthorLL) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*AuthorLL)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: a.__d3_createFieldExtractor(),
		},
	}
}

func (a *AuthorLL) __d3_createFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*AuthorLL)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "ID":
			return sTyped.ID, nil

		case "Name":
			return sTyped.Name, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}

func (b *BookEL) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*BookEL)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: b.__d3_createFieldExtractor(),
		},
	}
}

func (b *BookEL) __d3_createFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*BookEL)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "Id":
			return sTyped.Id, nil

		case "Rel":
			return sTyped.Rel, nil

		case "Name":
			return sTyped.Name, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}

func (a *AuthorEL) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*AuthorEL)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: a.__d3_createFieldExtractor(),
		},
	}
}

func (a *AuthorEL) __d3_createFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*AuthorEL)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "Id":
			return sTyped.Id, nil

		case "Rel":
			return sTyped.Rel, nil

		case "Name":
			return sTyped.Name, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}

func (r *Redactor) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*Redactor)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: r.__d3_createFieldExtractor(),
		},
	}
}

func (r *Redactor) __d3_createFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*Redactor)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "Id":
			return sTyped.Id, nil

		case "Name":
			return sTyped.Name, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}
