// Code generated by d3. DO NOT EDIT.

package relation

import "fmt"
import "d3/orm/entity"

func (s *ShopLR) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*ShopLR)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: s.__d3_createFieldExtractor(),
		},
	}
}

func (s *ShopLR) __d3_createFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*ShopLR)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "Id":
			return sTyped.Id, nil

		case "Books":
			return sTyped.Books, nil

		case "Name":
			return sTyped.Name, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}

func (b *BookLR) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*BookLR)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: b.__d3_createFieldExtractor(),
		},
	}
}

func (b *BookLR) __d3_createFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*BookLR)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "Id":
			return sTyped.Id, nil

		case "Name":
			return sTyped.Name, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}

func (s *ShopER) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*ShopER)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: s.__d3_createFieldExtractor(),
		},
	}
}

func (s *ShopER) __d3_createFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*ShopER)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "Id":
			return sTyped.Id, nil

		case "Books":
			return sTyped.Books, nil

		case "Name":
			return sTyped.Name, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}

func (b *BookER) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*BookER)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: b.__d3_createFieldExtractor(),
		},
	}
}

func (b *BookER) __d3_createFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*BookER)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "Id":
			return sTyped.Id, nil

		case "Discounts":
			return sTyped.Discounts, nil

		case "Name":
			return sTyped.Name, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}

func (d *DiscountER) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*DiscountER)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: d.__d3_createFieldExtractor(),
		},
	}
}

func (d *DiscountER) __d3_createFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*DiscountER)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "Id":
			return sTyped.Id, nil

		case "Value":
			return sTyped.Value, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}
