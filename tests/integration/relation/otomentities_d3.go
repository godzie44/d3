// Code generated by d3. DO NOT EDIT.

package relation

import "fmt"
import "d3/orm/entity"

func (s *ShopLR) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*ShopLR)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: s.__d3_makeFieldExtractor(),
			FieldSetter:    s.__d3_makeFieldSetter(),
			CompareFields:  s.__d3_makeComparator(),
			Instantiator:   s.__d3_makeInstantiator(),
			Copier:         s.__d3_makeCopier(),
		},
	}
}

func (s *ShopLR) __d3_makeFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*ShopLR)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "Id":
			return sTyped.Id, nil

		case "Books":
			return sTyped.Books, nil

		case "Name":
			return sTyped.Name, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}

func (s *ShopLR) __d3_makeInstantiator() entity.Instantiator {
	return func() interface{} {
		return &ShopLR{}
	}
}

func (s *ShopLR) __d3_makeFieldSetter() entity.FieldSetter {
	return func(s interface{}, name string, val interface{}) error {
		eTyped, ok := s.(*ShopLR)
		if !ok {
			return fmt.Errorf("invalid entity type")
		}

		switch name {
		case "Id":
			eTyped.Id = val.(int32)
			return nil
		case "Books":
			eTyped.Books = val.(entity.Collection)
			return nil
		case "Name":
			eTyped.Name = val.(string)
			return nil

		default:
			return fmt.Errorf("field %s not found", name)
		}
	}
}

func (s *ShopLR) __d3_makeCopier() entity.Copier {
	return func(src interface{}) interface{} {
		srcTyped, ok := src.(*ShopLR)
		if !ok {
			return fmt.Errorf("invalid entity type")
		}

		copy := &ShopLR{}

		copy.Id = srcTyped.Id
		copy.Name = srcTyped.Name

		if srcTyped.Books != nil {
			copy.Books = srcTyped.Books.(entity.Copiable).DeepCopy().(entity.Collection)
		}

		return copy
	}
}

func (s *ShopLR) __d3_makeComparator() entity.FieldComparator {
	return func(e1, e2 interface{}, fName string) bool {
		if e1 == nil || e2 == nil {
			return e1 == e2
		}

		e1Typed, ok := e1.(*ShopLR)
		if !ok {
			return false
		}
		e2Typed, ok := e2.(*ShopLR)
		if !ok {
			return false
		}

		switch fName {

		case "Id":
			return e1Typed.Id == e2Typed.Id
		case "Books":
			return e1Typed.Books == e2Typed.Books
		case "Name":
			return e1Typed.Name == e2Typed.Name
		default:
			return false
		}
	}
}

func (b *BookLR) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*BookLR)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: b.__d3_makeFieldExtractor(),
			FieldSetter:    b.__d3_makeFieldSetter(),
			CompareFields:  b.__d3_makeComparator(),
			Instantiator:   b.__d3_makeInstantiator(),
			Copier:         b.__d3_makeCopier(),
		},
	}
}

func (b *BookLR) __d3_makeFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*BookLR)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "Id":
			return sTyped.Id, nil

		case "Name":
			return sTyped.Name, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}

func (b *BookLR) __d3_makeInstantiator() entity.Instantiator {
	return func() interface{} {
		return &BookLR{}
	}
}

func (b *BookLR) __d3_makeFieldSetter() entity.FieldSetter {
	return func(s interface{}, name string, val interface{}) error {
		eTyped, ok := s.(*BookLR)
		if !ok {
			return fmt.Errorf("invalid entity type")
		}

		switch name {
		case "Id":
			eTyped.Id = val.(int32)
			return nil
		case "Name":
			eTyped.Name = val.(string)
			return nil

		default:
			return fmt.Errorf("field %s not found", name)
		}
	}
}

func (b *BookLR) __d3_makeCopier() entity.Copier {
	return func(src interface{}) interface{} {
		srcTyped, ok := src.(*BookLR)
		if !ok {
			return fmt.Errorf("invalid entity type")
		}

		copy := &BookLR{}

		copy.Id = srcTyped.Id
		copy.Name = srcTyped.Name

		return copy
	}
}

func (b *BookLR) __d3_makeComparator() entity.FieldComparator {
	return func(e1, e2 interface{}, fName string) bool {
		if e1 == nil || e2 == nil {
			return e1 == e2
		}

		e1Typed, ok := e1.(*BookLR)
		if !ok {
			return false
		}
		e2Typed, ok := e2.(*BookLR)
		if !ok {
			return false
		}

		switch fName {

		case "Id":
			return e1Typed.Id == e2Typed.Id
		case "Name":
			return e1Typed.Name == e2Typed.Name
		default:
			return false
		}
	}
}

func (s *ShopER) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*ShopER)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: s.__d3_makeFieldExtractor(),
			FieldSetter:    s.__d3_makeFieldSetter(),
			CompareFields:  s.__d3_makeComparator(),
			Instantiator:   s.__d3_makeInstantiator(),
			Copier:         s.__d3_makeCopier(),
		},
	}
}

func (s *ShopER) __d3_makeFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*ShopER)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "Id":
			return sTyped.Id, nil

		case "Books":
			return sTyped.Books, nil

		case "Name":
			return sTyped.Name, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}

func (s *ShopER) __d3_makeInstantiator() entity.Instantiator {
	return func() interface{} {
		return &ShopER{}
	}
}

func (s *ShopER) __d3_makeFieldSetter() entity.FieldSetter {
	return func(s interface{}, name string, val interface{}) error {
		eTyped, ok := s.(*ShopER)
		if !ok {
			return fmt.Errorf("invalid entity type")
		}

		switch name {
		case "Id":
			eTyped.Id = val.(int32)
			return nil
		case "Books":
			eTyped.Books = val.(entity.Collection)
			return nil
		case "Name":
			eTyped.Name = val.(string)
			return nil

		default:
			return fmt.Errorf("field %s not found", name)
		}
	}
}

func (s *ShopER) __d3_makeCopier() entity.Copier {
	return func(src interface{}) interface{} {
		srcTyped, ok := src.(*ShopER)
		if !ok {
			return fmt.Errorf("invalid entity type")
		}

		copy := &ShopER{}

		copy.Id = srcTyped.Id
		copy.Name = srcTyped.Name

		if srcTyped.Books != nil {
			copy.Books = srcTyped.Books.(entity.Copiable).DeepCopy().(entity.Collection)
		}

		return copy
	}
}

func (s *ShopER) __d3_makeComparator() entity.FieldComparator {
	return func(e1, e2 interface{}, fName string) bool {
		if e1 == nil || e2 == nil {
			return e1 == e2
		}

		e1Typed, ok := e1.(*ShopER)
		if !ok {
			return false
		}
		e2Typed, ok := e2.(*ShopER)
		if !ok {
			return false
		}

		switch fName {

		case "Id":
			return e1Typed.Id == e2Typed.Id
		case "Books":
			return e1Typed.Books == e2Typed.Books
		case "Name":
			return e1Typed.Name == e2Typed.Name
		default:
			return false
		}
	}
}

func (b *BookER) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*BookER)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: b.__d3_makeFieldExtractor(),
			FieldSetter:    b.__d3_makeFieldSetter(),
			CompareFields:  b.__d3_makeComparator(),
			Instantiator:   b.__d3_makeInstantiator(),
			Copier:         b.__d3_makeCopier(),
		},
	}
}

func (b *BookER) __d3_makeFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*BookER)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "Id":
			return sTyped.Id, nil

		case "Discounts":
			return sTyped.Discounts, nil

		case "Name":
			return sTyped.Name, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}

func (b *BookER) __d3_makeInstantiator() entity.Instantiator {
	return func() interface{} {
		return &BookER{}
	}
}

func (b *BookER) __d3_makeFieldSetter() entity.FieldSetter {
	return func(s interface{}, name string, val interface{}) error {
		eTyped, ok := s.(*BookER)
		if !ok {
			return fmt.Errorf("invalid entity type")
		}

		switch name {
		case "Id":
			eTyped.Id = val.(int32)
			return nil
		case "Discounts":
			eTyped.Discounts = val.(entity.Collection)
			return nil
		case "Name":
			eTyped.Name = val.(string)
			return nil

		default:
			return fmt.Errorf("field %s not found", name)
		}
	}
}

func (b *BookER) __d3_makeCopier() entity.Copier {
	return func(src interface{}) interface{} {
		srcTyped, ok := src.(*BookER)
		if !ok {
			return fmt.Errorf("invalid entity type")
		}

		copy := &BookER{}

		copy.Id = srcTyped.Id
		copy.Name = srcTyped.Name

		if srcTyped.Discounts != nil {
			copy.Discounts = srcTyped.Discounts.(entity.Copiable).DeepCopy().(entity.Collection)
		}

		return copy
	}
}

func (b *BookER) __d3_makeComparator() entity.FieldComparator {
	return func(e1, e2 interface{}, fName string) bool {
		if e1 == nil || e2 == nil {
			return e1 == e2
		}

		e1Typed, ok := e1.(*BookER)
		if !ok {
			return false
		}
		e2Typed, ok := e2.(*BookER)
		if !ok {
			return false
		}

		switch fName {

		case "Id":
			return e1Typed.Id == e2Typed.Id
		case "Discounts":
			return e1Typed.Discounts == e2Typed.Discounts
		case "Name":
			return e1Typed.Name == e2Typed.Name
		default:
			return false
		}
	}
}

func (d *DiscountER) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*DiscountER)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: d.__d3_makeFieldExtractor(),
			FieldSetter:    d.__d3_makeFieldSetter(),
			CompareFields:  d.__d3_makeComparator(),
			Instantiator:   d.__d3_makeInstantiator(),
			Copier:         d.__d3_makeCopier(),
		},
	}
}

func (d *DiscountER) __d3_makeFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*DiscountER)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "Id":
			return sTyped.Id, nil

		case "Value":
			return sTyped.Value, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}

func (d *DiscountER) __d3_makeInstantiator() entity.Instantiator {
	return func() interface{} {
		return &DiscountER{}
	}
}

func (d *DiscountER) __d3_makeFieldSetter() entity.FieldSetter {
	return func(s interface{}, name string, val interface{}) error {
		eTyped, ok := s.(*DiscountER)
		if !ok {
			return fmt.Errorf("invalid entity type")
		}

		switch name {
		case "Id":
			eTyped.Id = val.(int32)
			return nil
		case "Value":
			eTyped.Value = val.(int32)
			return nil

		default:
			return fmt.Errorf("field %s not found", name)
		}
	}
}

func (d *DiscountER) __d3_makeCopier() entity.Copier {
	return func(src interface{}) interface{} {
		srcTyped, ok := src.(*DiscountER)
		if !ok {
			return fmt.Errorf("invalid entity type")
		}

		copy := &DiscountER{}

		copy.Id = srcTyped.Id
		copy.Value = srcTyped.Value

		return copy
	}
}

func (d *DiscountER) __d3_makeComparator() entity.FieldComparator {
	return func(e1, e2 interface{}, fName string) bool {
		if e1 == nil || e2 == nil {
			return e1 == e2
		}

		e1Typed, ok := e1.(*DiscountER)
		if !ok {
			return false
		}
		e2Typed, ok := e2.(*DiscountER)
		if !ok {
			return false
		}

		switch fName {

		case "Id":
			return e1Typed.Id == e2Typed.Id
		case "Value":
			return e1Typed.Value == e2Typed.Value
		default:
			return false
		}
	}
}
