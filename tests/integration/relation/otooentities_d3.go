// Code generated by d3. DO NOT EDIT.

package relation

import "fmt"
import "d3/orm/entity"

func (s *ShopLL) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*ShopLL)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: s.__d3_makeFieldExtractor(),
			Instantiator:   s.__d3_makeInstantiator(),
		},
	}
}

func (s *ShopLL) __d3_makeFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*ShopLL)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "ID":
			return sTyped.ID, nil

		case "Profile":
			return sTyped.Profile, nil

		case "Data":
			return sTyped.Data, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}

func (s *ShopLL) __d3_makeInstantiator() entity.Instantiator {
	return func() interface{} {
		return &ShopLL{}
	}
}

func (p *ProfileLL) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*ProfileLL)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: p.__d3_makeFieldExtractor(),
			Instantiator:   p.__d3_makeInstantiator(),
		},
	}
}

func (p *ProfileLL) __d3_makeFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*ProfileLL)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "ID":
			return sTyped.ID, nil

		case "Photo":
			return sTyped.Photo, nil

		case "Data":
			return sTyped.Data, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}

func (p *ProfileLL) __d3_makeInstantiator() entity.Instantiator {
	return func() interface{} {
		return &ProfileLL{}
	}
}

func (p *PhotoLL) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*PhotoLL)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: p.__d3_makeFieldExtractor(),
			Instantiator:   p.__d3_makeInstantiator(),
		},
	}
}

func (p *PhotoLL) __d3_makeFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*PhotoLL)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "ID":
			return sTyped.ID, nil

		case "Data":
			return sTyped.Data, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}

func (p *PhotoLL) __d3_makeInstantiator() entity.Instantiator {
	return func() interface{} {
		return &PhotoLL{}
	}
}

func (s *ShopEL) D3Token() entity.MetaToken {
	return entity.MetaToken{
		Tpl:       (*ShopEL)(nil),
		TableName: "",
		Tools: entity.InternalTools{
			FieldExtractor: s.__d3_makeFieldExtractor(),
			Instantiator:   s.__d3_makeInstantiator(),
		},
	}
}

func (s *ShopEL) __d3_makeFieldExtractor() entity.FieldExtractor {
	return func(s interface{}, name string) (interface{}, error) {
		sTyped, ok := s.(*ShopEL)
		if !ok {
			return nil, fmt.Errorf("invalid entity type")
		}

		switch name {

		case "Id":
			return sTyped.Id, nil

		case "Profile":
			return sTyped.Profile, nil

		case "Data":
			return sTyped.Data, nil

		default:
			return nil, fmt.Errorf("field %s not found", name)
		}
	}
}

func (s *ShopEL) __d3_makeInstantiator() entity.Instantiator {
	return func() interface{} {
		return &ShopEL{}
	}
}
